<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Jimall's Blog</title><link>https://jimall-blog.vercel.app/tags/git/</link><description>Recent content in Git on Jimall's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© 2023 Jimall</copyright><lastBuildDate>Mon, 31 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jimall-blog.vercel.app/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>git submodule 的使用</title><link>https://jimall-blog.vercel.app/zh-cn/technology/git-submodule/</link><pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate><guid>https://jimall-blog.vercel.app/zh-cn/technology/git-submodule/</guid><description>在 Git 项目中，需要包含别的 Git 项目，我们希望能够独立的使用这两个项目。比如我们的博客是一个 Git 项目，而我们需要在博客中包含别人的项目作为博客主题，我们希望能够在自己写博文后 push 不影响博客主题仓库，同时希望能够独立使用主题仓库，这样我们就可以获取最新的主题。
这个时候需要用到 git submodule。在使用 submodule 之后，两个项目便相对独立（或者多个 submodule，那么就是多个项目相对独立）。下面介绍子模块常用的用法：
使用子模块 添加子模块 在 Git 项目中包含别的 Git 项目，不能够直接到相应文件夹 clone，而需要使用 git add submodule 命令，可以将这个命令视为子模块版本的 git clone。
1 git add submodule git@github.com/example/example.git submodule 上面的命令将项目克隆到 submodule 目录。会发现根目录生成了一个 .gitmodule 文件，这个文件用于保存子模块信息。
查看子模块 使用 git submodule 命令查看当前项目的子模块。
更新子模块 在项目中使用 git update 父模块并不会更新子模块。（别的操作同理，我们在项目中使用的各种以前使用的 git 操作都只会对父模块产生作用）
使用 git submodule add 添加子项目。
操作子模块 在子模块的文件夹内部，我们的各种操作都是对子模块的项目产生作用，比如 push 就是将子模块 push 到子模块的 remote repository。
所以需要单独修改子模块，只需要 cd 到子模块内，把子模块当成一个普通的 git 项目即可。</description></item><item><title>.gitignore 的写法</title><link>https://jimall-blog.vercel.app/zh-cn/technology/write-gitignore/</link><pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate><guid>https://jimall-blog.vercel.app/zh-cn/technology/write-gitignore/</guid><description>在一个项目中，并不是所有的文件都需要使用 Git 进行版本管理，比如一些自动生成的文件，这时候可以在项目中添加 .gitignore 文件来忽略一些不需要进行版本管理的文件。
.gitignore 有一套语法，下面介绍一下：
.gitignore 文件语法 首先 .gitignore 文件每一行定义一条规则，从上到下进行解释的。
注释 使用 # 行注释
通配符匹配 .gitignore 可以使用通配符匹配，并且常常用到（* 用的比较多）
* 表示一个或多个字符
[] 表示范围
? 表示单个字符
忽略文件和否定忽略文件 每一行，写路径即可忽略掉相应的内容，在路径前使用 ! 即可取消忽略相应路径，比如：
# 忽略 .exe 文件 *.exe # 否定忽略 main.exe，由于文件是从上到下进行解释的，所以上下两条规则的意思是忽略除了 main.exe 的所有 .exe 文件 !main.exe # 忽略 build 文件夹 build/ 防止递归 直接制定文件名，实际上是递归的忽略，也就是说 *.exe 会忽略目录下的所有 .exe 文件。
使用 / 防止递归：
# 仅在当前目录下忽略 temp 文件， 但不包括子目录下的 subdir/temp /temp # 忽略 build/ 文件夹下的所有文件 build/ # 忽略 doc/notes.</description></item></channel></rss>