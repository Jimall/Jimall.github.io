<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>security on BLOG</title><link>https://Jimall.github.io/technology/categories/security/</link><description>Recent content in security on BLOG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 01 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://Jimall.github.io/technology/categories/security/index.xml" rel="self" type="application/rss+xml"/><item><title>加密算法</title><link>https://Jimall.github.io/technology/posts/06.encryption/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate><guid>https://Jimall.github.io/technology/posts/06.encryption/</guid><description>&lt;p>加密算法涉及一些概念：数字签名、数据加密解密、加密算法、对称加密算法、非对称加密算法、单向加密算法。下面进行介绍。&lt;/p>
&lt;h2 id="加密和解密">加密和解密&lt;/h2>
&lt;p>加密和解密主要是为了&lt;strong>防止传输过程中的数据泄露&lt;/strong>，因为传输过程中不免会被抓包什么的。&lt;/p>
&lt;p>数据加密的基本过程，就是对原来为明文的文件或数据按某种算法进行处理，使其成为不可读的一段代码，通常称为密文。这样，发送的过程中，不会被非法人窃取，因为别人看不懂加密后的东西是啥。&lt;/p>
&lt;p>加密的逆过程为解密，即将”密文“转化为其原来数据的过程，因为传输后需要使用数据，不可能用加密后的看不懂的密文。&lt;/p>
&lt;h2 id="加密算法及应用">加密算法及应用&lt;/h2>
&lt;p>加密算法分为对称加密算法、非对称加密算法、单向加密算法。&lt;/p>
&lt;h3 id="对称加密算法">对称加密算法&lt;/h3>
&lt;p>&lt;strong>对称加密算法&lt;/strong>是应用较早的加密算法，又称为共享密钥加密算法。在对称加密算法中，&lt;strong>使用的密钥只有一个&lt;/strong>，发送和接收双方都使用这个密钥对数据进行加密和解密。这就要求加密和解密方事先都必须知道加密的密钥。&lt;/p>
&lt;p>&lt;strong>数据加密过程&lt;/strong>：在对称加密算法中，数据发送方将明文（原始数据）和加密密钥一起经过特殊加密处理，生成复杂的加密密文进行发送。&lt;/p>
&lt;p>&lt;strong>数据解密过程&lt;/strong>：数据接收方收到密文后，若想读取原数据，则需要使用加密使用的密钥及相同算法的逆算法对加密的密文进行解密，才能使其恢复成可读明文。&lt;/p>
&lt;p>这个道理可以这样理解：我们写 markdown，规则定好了，比如 # 表示一级标题（相当于秘钥），所以我这边就这样写一级标题（加密），然后发给你，因为采用一样的规则，你也解读成一级标题（解密），这样信息在两边就相同了。有人看到了我写的东西（密文），但是他不知道这个规则，他就不知道我写的东西究竟是啥。&lt;/p>
&lt;p>&lt;strong>对称加密算法的优缺点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>优点：操作比较简单，加密速度快，秘钥简单。经常在消息发送方需要加密大量数据时使用。&lt;/li>
&lt;li>缺点：秘钥存在传输泄露风险。因为新增一个协作方的时候，它需要秘钥来进行加密和解密，所以我们要把秘钥发给对方，那么这个过程中秘钥如果泄露，无论谁给我们发消息，获取秘钥的人都可以用这个秘钥去解密，相当于没有加密发消息（类似于抗战时期我方的密码本被敌方截获了，那敌方肯定啥都知道了）。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>常用对称加密算法&lt;/strong>：DES，3DES，AES 等。在 jdk 中都有封装。&lt;/p>
&lt;h3 id="非对称加密算法">非对称加密算法&lt;/h3>
&lt;p>&lt;strong>非对称加密算法&lt;/strong>，又称为公开密钥加密算法，顾名思义就是加密与解密的过程不是对称的，不使用同一个秘钥。它需要两个密钥，一个称为&lt;strong>公开密钥 (public key)&lt;/strong>，即公钥，另一个称为&lt;strong>私有密钥 (private key)&lt;/strong>，即私钥。公钥和私钥是结对的，生成的时候会生成一对公私钥对。&lt;/p>
&lt;p>&lt;strong>这种算法的特点&lt;/strong>是：&lt;/p>
&lt;ol>
&lt;li>使用公钥对数据进行加密，只有用对应的私钥才能进行解密。&lt;/li>
&lt;li>使用私钥对数据进行加密，只有用对应的公钥才能进行解密。&lt;/li>
&lt;/ol>
&lt;p>这里的关键点在于，&lt;strong>公钥加密的消息只能私钥解密&lt;/strong>。使用时由接收方生成公私钥对，然后将公钥传给发送方，私钥保存在服务器上，不进行任何传输，这样就不会泄露（除非有内鬼）。这种情况下，和对称加密不同，公钥可以随意分发给发送方，甚至泄漏到网上也没事，一个黑客拿着公钥没有办法解读别人发给我们的信息，所以&lt;strong>秘钥的传输是安全的，不用担心泄露，解决了对称传输中秘钥传输泄露的问题&lt;/strong>。&lt;/p>
&lt;p>非对称算法的缺点在于运算速度较慢。&lt;/p>
&lt;p>常用的非对称加密算法有：RSA、DSA、ECC 等。&lt;/p>
&lt;h3 id="单向加密算法">单向加密算法&lt;/h3>
&lt;p>&lt;strong>单向加密算法&lt;/strong>又称为不可逆加密算法，实际上就是哈希算法。它只能对明文数据进行加密，而不能对加密了的密文数据再解密成原来的明文数据，所以称为单向加密。&lt;/p>
&lt;p>单向加密的特点也就是哈希算法的特点：&lt;/p>
&lt;ol>
&lt;li>任意两段明文数据，加密以后的密文数据一定是不相同的&lt;/li>
&lt;li>任意一段明文数据，经过加密以后，其密文数据永远是相同的&lt;/li>
&lt;/ol>
&lt;p>单向加密的关键在于其应用：&lt;/p>
&lt;ol>
&lt;li>当用户注册一个新的账号时，其用户密码信息不是直接保存到数据库，而是经过单向加密后再保存，这样，即使这些账号信息被泄露，别人也不能得到相应的用户密码，因为单向加密没有办法进行解密，当然也就达不到盗窃账号的目的。&lt;/li>
&lt;li>用户 Login 的时候，系统对用户输入的密码进行单向加密，然后再去和系统中保存的加密值进行比较，但系统中并没有存明文密码，所以我们不会知道密码是什么。&lt;/li>
&lt;li>由于一样的文件，产生加密值是相同的，所以可以进行文件完整性检测。&lt;/li>
&lt;/ol>
&lt;p>常用的单向加密算法有 MD5、SHA&lt;/p>
&lt;p>提到单向加密算法经常会提到 BASE64 编码。目前 BASE64 已经成为网络上常见的传输 8Bit 字节代码的编码方式之一。&lt;/p>
&lt;p>在参数传输的过程中经常遇到的一种情况：使用全英文的没问题，但一旦涉及到中文就会出现乱码情况。与此类似，网络上传输的字符并不全是可打印的字符，比如二进制文件、图片等。Base64 的出现就是为了解决此问题，它是基于 64 个可打印的字符来表示二进制的数据的一种方法。&lt;/p>
&lt;p>电子邮件刚问世的时候，只能传输英文，但后来随着用户的增加，中文、日文等文字的用户也有需求，但这些字符并不能被服务器或网关有效处理，因此 Base64 就登场了。随之，Base64 在 URL、Cookie、网页传输少量二进制文件中也有相应的使用。&lt;/p>
&lt;h3 id="各个加密算法比较">各个加密算法比较&lt;/h3>
&lt;h2 id="数字签名数字证书和-https">数字签名、数字证书和 HTTPS&lt;/h2>
&lt;h2 id="参考阅读">参考阅读&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://juejin.cn/post/6844903638117122056">浅谈常见的七种加密算法及实现&lt;/a>：了解加密算法相关的大致框架，各个知识点解释的没那么清楚&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/54chensongxia/p/11671917.html">加解密算法最详解&lt;/a>：了解各种加密算法&lt;/li>
&lt;li>&lt;a href="https://nieyong.github.io/wiki_ny/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%B8%B8%E8%AF%86.html">加密算法常识&lt;/a>：单向加密的应用写的很好&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/wo541075754/article/details/81734770">一篇文章彻底弄懂 BASE64 编码原理&lt;/a>：关于 BASE64 编码&lt;/li>
&lt;li>&lt;a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html">数字签名是什么？&lt;/a>：数字签名、数字证书和 https 极为通俗的解释，阮一峰永远的神，推荐阅读✅&lt;/li>
&lt;/ol></description></item></channel></rss>