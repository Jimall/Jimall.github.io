<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScript on BLOG</title><link>https://Jimall.github.io/technology/categories/typescript/</link><description>Recent content in TypeScript on BLOG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 22 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://Jimall.github.io/technology/categories/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeScript 简明教程</title><link>https://Jimall.github.io/technology/posts/frontend/typescript/typescript-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</link><pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate><guid>https://Jimall.github.io/technology/posts/frontend/typescript/typescript-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</guid><description>&lt;p>TypeScript 是 JavaScript 的超集，能够用类似写 Java 的体验（更准确说来更像 Kotlin）来写 JavaScript，很方便很快捷。&lt;/p>
&lt;h2 id="typescript-类型">TypeScript 类型&lt;/h2>
&lt;p>TypeScript 的数据类型分为 boolean, number, string, array, tuple, enum, object, null, undefined, any, void, never&lt;/p>
&lt;ol>
&lt;li>
&lt;p>布尔（boolean）类型&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">let flag: boolean = false
&lt;/code>&lt;/pre>
&lt;p>有 true 和 false 两个值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数字（number）类型&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">let num1: number = 1
let num2: number = 1.8
let num3: number = -1
&lt;/code>&lt;/pre>
&lt;p>各种数字都是 number 类型，并且支持二进制八进制和十六进制值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>字符串（string）类型&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">let name: string = &amp;quot;typescript&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>支持模板字符串，用反引号&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">let description: string = `${name} is good`
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>数组（array）类型&lt;/p>
&lt;p>和 JavaScript 数组一样，类似于 Python 里的链表&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">let list: number[] = [1, 2, 3]
let list: Array&amp;lt;number&amp;gt; = [1, 2, 3]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>元组（tuple）类型&lt;/p>
&lt;p>元组中可以存不同类型的值&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">let x: [string, number] = [&amp;quot;hello&amp;quot;, 10]
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>枚举（enum）类型&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">enum Color {
Red,
Green,
Blue
}
const c: Color = Color.Green
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>对象（object）类型&lt;/p>
&lt;p>表示非原始类型，即除了 number、string、boolean，null，undefined 之外的类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>null 和 undefined 类型&lt;/p>
&lt;p>类型本身作用不是很大，但是 null 和 undefined 类型是所有类型的子类型，所以任何变量的值都可以是 null 或者 undefined。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>any 类型&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">const list: any[] = [1, true, &amp;quot;string&amp;quot;]
&lt;/code>&lt;/pre>
&lt;p>表示任意一个类型，当编译阶段不清楚类型的时候可以指定为 any 类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>void 类型&lt;/p>
&lt;p>表示没有任何类型，没有返回值的函数为 void 类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>never 类型&lt;/p>
&lt;p>never 表示用不存在的类型，总是会抛出异常或根本不会有返回值的函数表达式或箭头表达式的返回值类型可以为 never 类型。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="typescript-接口">TypeScript 接口&lt;/h2>
&lt;p>TypeScript 接口和 Java 稍有不同，它更多是定义对象的结构，比如指定有什么元素、有什么方法之类的。&lt;/p>
&lt;p>语法如下：&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">interface Information {
username: string
}
// 如不符合 Information 接口定义，编译阶段报错
let infor: Information = {
username: &amp;quot;Zhang San&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>接口中的属性默认情况下是必须的，不然编译阶段会报错，可以使用 &lt;code>?&lt;/code> 定义可选属性：&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">interface Information {
username: string
nickName?: string
}
// nickName 为可选属性，符合接口标准
let infor: Information = {
username: &amp;quot;Zhang San&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;p>同时一些对象属性可以指定为只读，这样后续不能被修改值，这就类似于常量使用 const 声明，接口中的常量使用 readonly 声明：&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">interface Information {
username: string
nickName?: string
readonly id: string
}
let infor: Information = {
username: &amp;quot;Zhang San&amp;quot;
id: &amp;quot;123456&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;h2 id="函数">函数&lt;/h2>
&lt;pre>&lt;code class="language-TypeScript">function add(a: number, b: number): number {
return a + b
}
&lt;/code>&lt;/pre>
&lt;p>函数可以使用 &lt;code>?&lt;/code> 指定可选参数：&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">function buildName(firstName: string, lastName?: string): string {
if (lastName) {
return `${firstName} ${lastName}`
} else {
return firstName
}
}
&lt;/code>&lt;/pre>
&lt;p>函数可以指定默认参数，默认参数本身就是可选的，不需要指定 &lt;code>?&lt;/code>：&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">function buildName(firstName: string, lastName?: string): string {
if (lastName) {
return `${firstName} ${lastName}`
} else {
return firstName
}
}
&lt;/code>&lt;/pre>
&lt;p>可以指定剩余参数：&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">function sum(x: number, y: number, ...rest: number[]) {
return x + y + reduce((acc, value) =&amp;gt; acc + value, 0);
}
&lt;/code>&lt;/pre>
&lt;h2 id="typescript-类">TypeScript 类&lt;/h2>
&lt;pre>&lt;code class="language-TypeScript">class Circle {
private radius: number
private x: number
private y: number
readonly PI: number = 3.14
get radius(): number {
return this.number
}
get x(): number {
return this.x
}
set x(x: number) {
this.x = x
}
get y(): number {
return this.y
}
set y(y: number) {
this.y = y
}
constructor(radius: number = 1, x: number = 1, y: number = 1) {
this.radius = radius
this.x = x
this.y = y
}
getArea(): number {
return PI * radius * radius
}
}
&lt;/code>&lt;/pre>
&lt;p>默认为 public，同时也支持 private 和 protected，和 Java 写法极其类似，不过 getter 和 setter 的写法和构造器的写法有所不同。&lt;/p>
&lt;p>同时类还可以有静态属性：&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">class Constants {
static PI: number = 3.14
}
&lt;/code>&lt;/pre>
&lt;p>使用 extends 关键字继承类，使用 implements 关键字实现接口，写法和 Java 类似，包括也有 super 关键字，不多赘述：&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">class Person {
protected name: string;
constructor(name: string) {
this.name = name;
}
}
class Employee extends Person {
private department: string;
constructor(name: string, department: string) {
super(name);
this.department = department;
}
public getElevatorPitch() {
return `Hello, my name is ${this.name} and I work in ${this.department}.`;
}
}
&lt;/code>&lt;/pre>
&lt;h2 id="typescript-类型推论">TypeScript 类型推论&lt;/h2>
&lt;p>对于未显式指定的类型的变量，TypeScript 会进行类型推断，所有的变量一定有其类型&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">let x: number = 0;
x = 1; // OK
x = '1'; // error
&lt;/code>&lt;/pre>
&lt;h2 id="typescript-类型断言">TypeScript 类型断言&lt;/h2>
&lt;p>可以通过类型断言来告诉编译器 any 是哪种类型，类型断言有两种形式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>尖括号&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">let someVal: any = &amp;quot;a string&amp;quot;
let strLength: number = (&amp;lt;string&amp;gt;someVal).length
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>as 语法&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">let someVal: any = &amp;quot;a string&amp;quot;
let strLength: number = (someVal as string).length
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;p>两种形式是等价的。至于使用哪个大多数情况下是凭个人喜好；然而，当在 TypeScript 里使用到 JSX 时，只有 as 形式的断言是被允许的。&lt;/p>
&lt;h2 id="typescript-非空断言关键字">TypeScript 非空断言关键字&lt;/h2>
&lt;p>使用 ！来指定非空的变量，即告诉编译器值不能为 null。&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">let a: number | undefined = undefined
let b: number = a!
&lt;/code>&lt;/pre>
&lt;h2 id="typescript-泛型">TypeScript 泛型&lt;/h2>
&lt;p>TypeScript 泛型写法和 Java 泛型相似：&lt;/p>
&lt;p>泛型方法：&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">function add&amp;lt;T&amp;gt;(a: T, b: T): T {
return a + b
}
&lt;/code>&lt;/pre>
&lt;p>泛型接口：&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">interface GenericIdentityFn&amp;lt;T&amp;gt; {
(arg: T): T;
}
function identity&amp;lt;T&amp;gt;(arg: T): T {
return arg;
}
let myIdentity: GenericIdentityFn&amp;lt;number&amp;gt; = identity;
&lt;/code>&lt;/pre>
&lt;p>泛型类：&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">class GenericNumber&amp;lt;T&amp;gt; {
zeroValue: T;
add: (x: T, y: T) =&amp;gt; T;
}
&lt;/code>&lt;/pre>
&lt;p>泛型约束：&lt;/p>
&lt;p>可以使用 extends 语法来约束泛型：&lt;code>&amp;lt;T extends Lengthwise&amp;gt;&lt;/code>$&lt;/p>
&lt;p>泛型参数默认值：&lt;/p>
&lt;p>泛型参数可以指定默认值：&lt;code>&amp;lt;T = number&amp;gt;&lt;/code>&lt;/p>
&lt;h2 id="联合类型">联合类型&lt;/h2>
&lt;p>使用 &lt;code>|&lt;/code> 表示联合类型，类似 C 语言中的 union，可以表示多种类型中的一个：&lt;/p>
&lt;pre>&lt;code class="language-TypeScript">let item: string | number | undefined
&lt;/code>&lt;/pre>
&lt;p>那么 item 可以是三种类型中的任意一种类型&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;p>语言更多特性参考官网文档：&lt;/p>
&lt;p>&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html">https://www.typescriptlang.org/docs/handbook/intro.html&lt;/a>&lt;/p>
&lt;p>本文参考：&lt;/p>
&lt;p>&lt;a href="https://sinoui.github.io/sinoui-guide/docs/ts-tutorial#%E6%B3%9B%E5%9E%8B%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC">https://sinoui.github.io/sinoui-guide/docs/ts-tutorial#%E6%B3%9B%E5%9E%8B%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC&lt;/a>（讲的很全，不过有些地方讲的多了）&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/twypx/article/details/80290806">https://blog.csdn.net/twypx/article/details/80290806&lt;/a>（有些地方没讲全）&lt;/p></description></item></channel></rss>