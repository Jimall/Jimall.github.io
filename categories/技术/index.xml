<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on Jimall&#39;s Blog</title>
    <link>https://jimall.github.io/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on Jimall&#39;s Blog</description>
    <image>
      <title>Jimall&#39;s Blog</title>
      <url>https://jimall.github.io/papermod-cover.png</url>
      <link>https://jimall.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 31 May 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jimall.github.io/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git submodule 的使用</title>
      <link>https://jimall.github.io/zh-cn/technology/git-submodule/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      <guid>https://jimall.github.io/zh-cn/technology/git-submodule/</guid>
      <description>在 hugo blog 中，会用到 git submodule，本文介绍这个特性的使用</description>
    </item>
    <item>
      <title>使用 Github actions 自动发布 Hugo 博客</title>
      <link>https://jimall.github.io/zh-cn/technology/github-acitons/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      <guid>https://jimall.github.io/zh-cn/technology/github-acitons/</guid>
      <description>使用 hugo 写博客的时候，每次增加文章，需要本地构建之后发布到 github 上通过 github pages 服务展示页面，不难想到可以使用 CI 的方法，将构建的过程自动化，实现写博文 push 到 github 即可自动构建并发布到 github pages。
搞的过程中坑比较多，记录为一个教程，供各位参考。
我折腾过程中的参考：https://tianhui.xin/blog/2019/11/17/hugousegithubactionstopages/
创建代码仓库和 github pages 仓库 构建过程中采用两个仓库：
代码仓库，github pages 在这里构建并发布，我们设为 username.github.io.source github pages 仓库，用于存放构建好的文件，github pages 服务会根据构建好的文件展示我们的博。客，我们设为 username.github.io （username 改为你自己的 github username） 简单说来就是根据代码仓库的文件构建，构建好之后发布到 github pages 仓库，github pages 仓库由于有 github 提供的服务，会自动展示我们的 blog。
创建 github pages 仓库 没啥特别，github 上创建一个空仓库 username.github.io
创建代码仓库 这个仓库和我们本地直接关联，创建有一些细节需要注意，我下面的过程给各位参考：
github 创建空仓库 username.github.io.source
本地找个空文件夹，比如叫 HugoBlog，进去之后初始化 Hugo Blog：hugo new site . 初始化 git 仓库：git init 添加主题文件，这步需要注意，需要使用 git submodule 来进行（照着做就完了，不需要深入了解），比如我这边采用的主题文件为 joway/hugo-theme-yinyang，那么命令为：git submodule add git@github.</description>
    </item>
    <item>
      <title>.gitignore 的写法</title>
      <link>https://jimall.github.io/zh-cn/technology/write-gitignore/</link>
      <pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
      <guid>https://jimall.github.io/zh-cn/technology/write-gitignore/</guid>
      <description>在一个项目中，并不是所有的文件都需要使用 Git 进行版本管理，比如一些自动生成的文件，这时候可以在项目中添加 .gitignore 文件来忽略一些不需要进行版本管理的文件。
.gitignore 有一套语法，下面介绍一下：
.gitignore 文件语法 首先 .gitignore 文件每一行定义一条规则，从上到下进行解释的。
注释 使用 # 行注释
通配符匹配 .gitignore 可以使用通配符匹配，并且常常用到（* 用的比较多）
* 表示一个或多个字符
[] 表示范围
? 表示单个字符
忽略文件和否定忽略文件 每一行，写路径即可忽略掉相应的内容，在路径前使用 ! 即可取消忽略相应路径，比如：
# 忽略 .exe 文件 *.exe # 否定忽略 main.exe，由于文件是从上到下进行解释的，所以上下两条规则的意思是忽略除了 main.exe 的所有 .exe 文件 !main.exe # 忽略 build 文件夹 build/ 防止递归 直接制定文件名，实际上是递归的忽略，也就是说 *.exe 会忽略目录下的所有 .exe 文件。
使用 / 防止递归：
# 仅在当前目录下忽略 temp 文件， 但不包括子目录下的 subdir/temp /temp # 忽略 build/ 文件夹下的所有文件 build/ # 忽略 doc/notes.</description>
    </item>
  </channel>
</rss>
