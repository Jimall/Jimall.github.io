[{"content":"2021/09/03\n人，终究是本能地活着，我们不论如何设想自己会遇到什么情况要怎么做，最终靠的都是本能。\n我们的未雨绸缪，我们的各种准备，都是为了自己产生本能服务。\n本能是个不便于分析的东西。比如明明如何分析来分析去，都应该在女朋友生气的时候示下弱，可是你就是说那就算了吧，我们不合适。\n我们本能会做出什么反应事实无从分析，但我们做出的本能反应却可以细细分析，比如为什么自己会删了喜欢的女孩。你本能的反应，其实反映了一些内在真实，你说什么骗不了自己，身体做出的反应是诚实的。所以分析自己的本能反应，就是发现自己的内在真实，这可以帮助我们调整自己。\n要做自己的观察者，我们的所有反应都值得细细观察。\n","permalink":"https://jimall.github.io/posts/thoughts/%E5%81%9A%E8%87%AA%E5%B7%B1%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85/","summary":"2021/09/03\n人，终究是本能地活着，我们不论如何设想自己会遇到什么情况要怎么做，最终靠的都是本能。\n我们的未雨绸缪，我们的各种准备，都是为了自己产生本能服务。\n本能是个不便于分析的东西。比如明明如何分析来分析去，都应该在女朋友生气的时候示下弱，可是你就是说那就算了吧，我们不合适。\n我们本能会做出什么反应事实无从分析，但我们做出的本能反应却可以细细分析，比如为什么自己会删了喜欢的女孩。你本能的反应，其实反映了一些内在真实，你说什么骗不了自己，身体做出的反应是诚实的。所以分析自己的本能反应，就是发现自己的内在真实，这可以帮助我们调整自己。\n要做自己的观察者，我们的所有反应都值得细细观察。","title":"做自己的观察者"},{"content":"喜欢 今天艺术概论课上，老师提到《暗恋桃花源》里面的片段：\n 云之凡：（走动，江滨柳跟随）有时候我在想，你在昆明呆了三年，又是在联大念的书，真是不可思议，我们同校三年，我怎么会没见过你呢？或许，我们曾经在路上擦肩而过，可是我们居然在昆明不认识，跑到上海才认识。这么大的上海，要碰到还真不容易呢！如果，我们在上海也不认识的话，那不晓得会怎么样，呵。\n江滨柳：不会，我们在上海一定会认识！\n云之凡：这么肯定？\n江滨柳：当然！我没有办法想象，如果我们在上海不认识，那生活会变得多么空虚。好，就算我们在上海不认识，我们隔了十年，我们在……汉口也会认识；就算我们在汉口也不认识，那么我们隔了三十，甚至四十年，我们在……在海外也会认识。我们一定会认识。\n云之凡：可是那样的话，我们都老了。那又有什么意思呢？\n江滨柳：（握云之凡的手）老了，也很美呀！\n 我们在人生中一定会相遇，实在是太浪漫了！\n每每这种时候，我就会想起那个姑娘，想到感情真挚的自己。\n你还喜欢她吗？ 高中同学都知道我喜欢她，并且显而易见我们最后没有在一起，所以他们当然会问：\n ”你是不是还对她有感情？“\n 这个问题并不好回答，于是我常常会面露难色。\n喜欢是什么？ 要回答是不是还喜欢这个问题，首先要回答喜欢是什么？\n我觉得，喜欢不是针对某个人的，喜欢是我们对美好的向往，我们喜欢一个人，其实不是喜欢那个人，是喜欢ta身上的某些特质。并且，喜欢一个人往往是带有想象的，即我们认为ta存在让自己很喜欢的一些特质，但是实际上不一定真的如此。可能，很遗憾，只是我们看错了，ta没有想象中那般美好，这种情况稍有遗憾但其实没那么大不了。又可能，很悲伤，ta其实把我们骗了，我们对她的一切想象都是不切实际的，这种情况谓之错爱。\n我对那个人，是稍有遗憾。\n我喜欢的她活泼可爱、真诚待人、天真浪漫。她早就活在我的脑海中，让我魂牵梦绕：看文学作品会想到她、看电影会想到她，甚至梦里她也常常出现。有一天，那个人出现了，让我觉得：哇！真的就是她！梦想成真的感觉！可是慢慢发现，那个人不是她，只是我以为是她而已。然而，那个人和她的相似点也足矣让我激动不已了。\n所以，要问我还喜不喜欢，我会说我当然喜欢，但是喜欢的不是那个人，而是那个人身上闪闪发光的特质，那个人在某些方面实在是太像她了！\n 我跟那个人已经没有可能了，但我觉得十分幸运，认识了一个那么像她的人，所以我仍然会对那个人饱含激情\n 喜欢过的那些女孩 从高中到现在，欣赏过的女孩不算很多，她们身上的特质其实是我觉得自己应该具备的特质：\nLYJ：她给人一种很呆、很天真，甚至感觉脑子有点不好使的感觉，从长相到说话都给人这种感觉。\n我也想这样，傻傻的、呆呆的，世界本来就没那么复杂，不需要我们思考太多，想那么多，考虑那么多，多累啊！其实有点随遇而安的味道，因为人总是觉得good is never good enough，花太多时间考虑better的问题，太累了，不如worse without thinking，哪来那么多时间比较来比较去啊！\nGZQ：我现在还记得，即使在高三那么忙的时候，她的头发都梳得十分整齐，大家闺秀的感觉。纯论长相，她确实并不出众，但是结合上言谈举止和气质，那真的就是女神。她的笑是我感觉最可爱的笑了！\n这种气质我比较难有，毕竟还是走屌丝风的，个人也觉得偏向于屌丝会活的有趣一些xD。但是这种本身并不出众，靠着后天的培养变得很有气质的感觉真的很酷，腹有诗书气自华的感觉，希望有一天我也能酱紫。\nCMK：她很活泼，爱笑，配上漂亮的脸，那自然是班花级别。但她从来不觉得美是资本，于是她很努力，她不会理睬那些搭讪的男孩子，她知道她们喜欢的是她的脸，而脸并不是自己的资本，所以自己要努力，努力创造真正的资本。\n最刻骨铭心的喜欢，概括后的特质其实也没有那么特别。不过其实我对她的印象还有后续，她可能从某种程度上感受到了，美也是一种资本。于是她会高兴地说自己在表白墙上被表白了很多次。她的语气从我这里听出了得意的感觉，“我在表白墙上被表白了好多次了，一群神经病”，究竟是真的得意还是因为我对她的感情滋生出的醋意让我感到她得意，我不得而知。总之，我希望自己做事的时候忘掉自己所有的美，一件件事情都是让自己更美的步骤。\n你在哪？ 我们是不是已经认识了？我们会认识吗？我们会在什么样的年华、什么样的场景下认识呢？一切不得而知，也没有哪个好心人会来告诉我。\n我相信，我们会认识，在正好的青春，忙碌的码农生活偷闲的周末，午后的星巴克，我恰好瞟了你一眼，做出了人生中最让自己讨厌的决定：“hello，能要个微信吗？”\n毕竟，我觉得向陌生人要微信的都是傻逼。\n","permalink":"https://jimall.github.io/posts/thoughts/%E5%96%9C%E6%AC%A2/","summary":"喜欢 今天艺术概论课上，老师提到《暗恋桃花源》里面的片段：\n 云之凡：（走动，江滨柳跟随）有时候我在想，你在昆明呆了三年，又是在联大念的书，真是不可思议，我们同校三年，我怎么会没见过你呢？或许，我们曾经在路上擦肩而过，可是我们居然在昆明不认识，跑到上海才认识。这么大的上海，要碰到还真不容易呢！如果，我们在上海也不认识的话，那不晓得会怎么样，呵。\n江滨柳：不会，我们在上海一定会认识！\n云之凡：这么肯定？\n江滨柳：当然！我没有办法想象，如果我们在上海不认识，那生活会变得多么空虚。好，就算我们在上海不认识，我们隔了十年，我们在……汉口也会认识；就算我们在汉口也不认识，那么我们隔了三十，甚至四十年，我们在……在海外也会认识。我们一定会认识。\n云之凡：可是那样的话，我们都老了。那又有什么意思呢？\n江滨柳：（握云之凡的手）老了，也很美呀！\n 我们在人生中一定会相遇，实在是太浪漫了！\n每每这种时候，我就会想起那个姑娘，想到感情真挚的自己。\n你还喜欢她吗？ 高中同学都知道我喜欢她，并且显而易见我们最后没有在一起，所以他们当然会问：\n ”你是不是还对她有感情？“\n 这个问题并不好回答，于是我常常会面露难色。\n喜欢是什么？ 要回答是不是还喜欢这个问题，首先要回答喜欢是什么？\n我觉得，喜欢不是针对某个人的，喜欢是我们对美好的向往，我们喜欢一个人，其实不是喜欢那个人，是喜欢ta身上的某些特质。并且，喜欢一个人往往是带有想象的，即我们认为ta存在让自己很喜欢的一些特质，但是实际上不一定真的如此。可能，很遗憾，只是我们看错了，ta没有想象中那般美好，这种情况稍有遗憾但其实没那么大不了。又可能，很悲伤，ta其实把我们骗了，我们对她的一切想象都是不切实际的，这种情况谓之错爱。\n我对那个人，是稍有遗憾。\n我喜欢的她活泼可爱、真诚待人、天真浪漫。她早就活在我的脑海中，让我魂牵梦绕：看文学作品会想到她、看电影会想到她，甚至梦里她也常常出现。有一天，那个人出现了，让我觉得：哇！真的就是她！梦想成真的感觉！可是慢慢发现，那个人不是她，只是我以为是她而已。然而，那个人和她的相似点也足矣让我激动不已了。\n所以，要问我还喜不喜欢，我会说我当然喜欢，但是喜欢的不是那个人，而是那个人身上闪闪发光的特质，那个人在某些方面实在是太像她了！\n 我跟那个人已经没有可能了，但我觉得十分幸运，认识了一个那么像她的人，所以我仍然会对那个人饱含激情\n 喜欢过的那些女孩 从高中到现在，欣赏过的女孩不算很多，她们身上的特质其实是我觉得自己应该具备的特质：\nLYJ：她给人一种很呆、很天真，甚至感觉脑子有点不好使的感觉，从长相到说话都给人这种感觉。\n我也想这样，傻傻的、呆呆的，世界本来就没那么复杂，不需要我们思考太多，想那么多，考虑那么多，多累啊！其实有点随遇而安的味道，因为人总是觉得good is never good enough，花太多时间考虑better的问题，太累了，不如worse without thinking，哪来那么多时间比较来比较去啊！\nGZQ：我现在还记得，即使在高三那么忙的时候，她的头发都梳得十分整齐，大家闺秀的感觉。纯论长相，她确实并不出众，但是结合上言谈举止和气质，那真的就是女神。她的笑是我感觉最可爱的笑了！\n这种气质我比较难有，毕竟还是走屌丝风的，个人也觉得偏向于屌丝会活的有趣一些xD。但是这种本身并不出众，靠着后天的培养变得很有气质的感觉真的很酷，腹有诗书气自华的感觉，希望有一天我也能酱紫。\nCMK：她很活泼，爱笑，配上漂亮的脸，那自然是班花级别。但她从来不觉得美是资本，于是她很努力，她不会理睬那些搭讪的男孩子，她知道她们喜欢的是她的脸，而脸并不是自己的资本，所以自己要努力，努力创造真正的资本。\n最刻骨铭心的喜欢，概括后的特质其实也没有那么特别。不过其实我对她的印象还有后续，她可能从某种程度上感受到了，美也是一种资本。于是她会高兴地说自己在表白墙上被表白了很多次。她的语气从我这里听出了得意的感觉，“我在表白墙上被表白了好多次了，一群神经病”，究竟是真的得意还是因为我对她的感情滋生出的醋意让我感到她得意，我不得而知。总之，我希望自己做事的时候忘掉自己所有的美，一件件事情都是让自己更美的步骤。\n你在哪？ 我们是不是已经认识了？我们会认识吗？我们会在什么样的年华、什么样的场景下认识呢？一切不得而知，也没有哪个好心人会来告诉我。\n我相信，我们会认识，在正好的青春，忙碌的码农生活偷闲的周末，午后的星巴克，我恰好瞟了你一眼，做出了人生中最让自己讨厌的决定：“hello，能要个微信吗？”\n毕竟，我觉得向陌生人要微信的都是傻逼。","title":"喜欢"},{"content":"认可自己 实习期间，主管请吃饭，聊着聊着家长里短，他突然问我，最让你感到骄傲的事情是什么，我答不上来，觉得人生中经历的所有事情好像都没啥了不起。\n事实上，让自己感到骄傲的事情有没有呢？显然是有的，这些事情真是让自己想到就觉得我是真的真的很不戳xD。\n 比如通过自己的努力让自己喜欢的女孩子喜欢上自己； 比如高中自己觉得自己做人各方面都不错，结果确实别人也是这么看自己的； 比如当学助时对于同学的求助，从来不会敷衍了事，从来没有搞不定的情况。 \u0026hellip;\n 说起这些事情，真是由衷为自己感到骄傲，但是要我说给别人听，我会下意识地抗拒。归根结底，是因为害怕被别人评判，因为无论怎样，自己的观点都能被恶意的揣测，这种感觉是很糟糕的。\n“走自己的路，让别人说去吧”的洒脱真不是说有就能有的，需要比较强的自我认同和足够清醒的判断。我显然缺少自我认同，并且打心底里希望得到他人的认同。这和我以为的自己不太一样。我印象中的自己，清楚自己想要什么，不好面子，希望得到别人的认可，但这种认可是共事之后对我的信任而不是一些tag产生的晕轮效应。\n我对自己还是缺乏足够的认可，多了太多的怀疑，想对自己说：洒脱一些，自己不是挺为自己感到高兴的吗，为什么因为环境、因为别人而对自己高兴的事情感到怀疑呢？\n认可自己的两个极端一个是过于自卑、一个是过分自信，对自己的认可向这两个方向发展都是不好的，要保持清醒，时刻保持对自己的判断。\n之前，我觉得诸如你觉得最骄傲的事情的这些问题，挺尬的。可是我现在觉得，这些问题可以触发我们内在的思考，让我们能更加全面地认识自己。\n","permalink":"https://jimall.github.io/posts/thoughts/%E8%AE%A4%E5%8F%AF%E8%87%AA%E5%B7%B1/","summary":"认可自己 实习期间，主管请吃饭，聊着聊着家长里短，他突然问我，最让你感到骄傲的事情是什么，我答不上来，觉得人生中经历的所有事情好像都没啥了不起。\n事实上，让自己感到骄傲的事情有没有呢？显然是有的，这些事情真是让自己想到就觉得我是真的真的很不戳xD。\n 比如通过自己的努力让自己喜欢的女孩子喜欢上自己； 比如高中自己觉得自己做人各方面都不错，结果确实别人也是这么看自己的； 比如当学助时对于同学的求助，从来不会敷衍了事，从来没有搞不定的情况。 \u0026hellip;\n 说起这些事情，真是由衷为自己感到骄傲，但是要我说给别人听，我会下意识地抗拒。归根结底，是因为害怕被别人评判，因为无论怎样，自己的观点都能被恶意的揣测，这种感觉是很糟糕的。\n“走自己的路，让别人说去吧”的洒脱真不是说有就能有的，需要比较强的自我认同和足够清醒的判断。我显然缺少自我认同，并且打心底里希望得到他人的认同。这和我以为的自己不太一样。我印象中的自己，清楚自己想要什么，不好面子，希望得到别人的认可，但这种认可是共事之后对我的信任而不是一些tag产生的晕轮效应。\n我对自己还是缺乏足够的认可，多了太多的怀疑，想对自己说：洒脱一些，自己不是挺为自己感到高兴的吗，为什么因为环境、因为别人而对自己高兴的事情感到怀疑呢？\n认可自己的两个极端一个是过于自卑、一个是过分自信，对自己的认可向这两个方向发展都是不好的，要保持清醒，时刻保持对自己的判断。\n之前，我觉得诸如你觉得最骄傲的事情的这些问题，挺尬的。可是我现在觉得，这些问题可以触发我们内在的思考，让我们能更加全面地认识自己。","title":"认可自己"},{"content":"TypeScript 是 JavaScript 的超集，能够用类似写 Java 的体验（更准确说来更像 Kotlin）来写 JavaScript，很方便很快捷。\nTypeScript 类型 TypeScript 的数据类型分为 boolean, number, string, array, tuple, enum, object, null, undefined, any, void, never\n  布尔（boolean）类型\nlet flag: boolean = false 有 true 和 false 两个值\n  数字（number）类型\nlet num1: number = 1 let num2: number = 1.8 let num3: number = -1 各种数字都是 number 类型，并且支持二进制八进制和十六进制值\n  字符串（string）类型\nlet name: string = \u0026#34;typescript\u0026#34; 支持模板字符串，用反引号\nlet description: string = `${name}is good`   数组（array）类型\n和 JavaScript 数组一样，类似于 Python 里的链表\nlet list: number[] = [1, 2, 3] let list: Array\u0026lt;number\u0026gt; = [1, 2, 3]   元组（tuple）类型\n元组中可以存不同类型的值\nlet x: [string, number] = [\u0026#34;hello\u0026#34;, 10]   枚举（enum）类型\nenum Color { Red, Green, Blue } const c: Color = Color.Green   对象（object）类型\n表示非原始类型，即除了 number、string、boolean，null，undefined 之外的类型\n  null 和 undefined 类型\n类型本身作用不是很大，但是 null 和 undefined 类型是所有类型的子类型，所以任何变量的值都可以是 null 或者 undefined。\n  any 类型\nconst list: any[] = [1, true, \u0026#34;string\u0026#34;] 表示任意一个类型，当编译阶段不清楚类型的时候可以指定为 any 类型\n  void 类型\n表示没有任何类型，没有返回值的函数为 void 类型\n  never 类型\nnever 表示用不存在的类型，总是会抛出异常或根本不会有返回值的函数表达式或箭头表达式的返回值类型可以为 never 类型。\n  TypeScript 接口 TypeScript 接口和 Java 稍有不同，它更多是定义对象的结构，比如指定有什么元素、有什么方法之类的。\n语法如下：\ninterface Information { username: string } // 如不符合 Information 接口定义，编译阶段报错 let infor: Information = { username: \u0026#34;Zhang San\u0026#34; } 接口中的属性默认情况下是必须的，不然编译阶段会报错，可以使用 ? 定义可选属性：\ninterface Information { username: string nickName?: string } // nickName 为可选属性，符合接口标准 let infor: Information = { username: \u0026#34;Zhang San\u0026#34; } 同时一些对象属性可以指定为只读，这样后续不能被修改值，这就类似于常量使用 const 声明，接口中的常量使用 readonly 声明：\ninterface Information { username: string nickName?: string readonly id: string } let infor: Information = { username: \u0026#34;Zhang San\u0026#34; id: \u0026#34;123456\u0026#34; } 函数 function add(a: number, b: number): number { return a + b } 函数可以使用 ? 指定可选参数：\nfunction buildName(firstName: string, lastName?: string): string { if (lastName) { return `${firstName}${lastName}` } else { return firstName } } 函数可以指定默认参数，默认参数本身就是可选的，不需要指定 ?：\nfunction buildName(firstName: string, lastName?: string): string { if (lastName) { return `${firstName}${lastName}` } else { return firstName } } 可以指定剩余参数：\nfunction sum(x: number, y: number, ...rest: number[]) { return x + y + reduce((acc, value) =\u0026gt; acc + value, 0); } TypeScript 类 class Circle { private radius: number private x: number private y: number readonly PI: number = 3.14 get radius(): number { return this.number } get x(): number { return this.x } set x(x: number) { this.x = x } get y(): number { return this.y } set y(y: number) { this.y = y } constructor(radius: number = 1, x: number = 1, y: number = 1) { this.radius = radius this.x = x this.y = y } getArea(): number { return PI * radius * radius } } 默认为 public，同时也支持 private 和 protected，和 Java 写法极其类似，不过 getter 和 setter 的写法和构造器的写法有所不同。\n同时类还可以有静态属性：\nclass Constants { static PI: number = 3.14 } 使用 extends 关键字继承类，使用 implements 关键字实现接口，写法和 Java 类似，包括也有 super 关键字，不多赘述：\nclass Person { protected name: string; constructor(name: string) { this.name = name; } } class Employee extends Person { private department: string; constructor(name: string, department: string) { super(name); this.department = department; } public getElevatorPitch() { return `Hello, my name is ${this.name}and I work in ${this.department}.`; } } TypeScript 类型推论 对于未显式指定的类型的变量，TypeScript 会进行类型推断，所有的变量一定有其类型\nlet x: number = 0; x = 1; // OK x = \u0026#39;1\u0026#39;; // error TypeScript 类型断言 可以通过类型断言来告诉编译器 any 是哪种类型，类型断言有两种形式：\n  尖括号\nlet someVal: any = \u0026#34;a string\u0026#34; let strLength: number = (\u0026lt;string\u0026gt;someVal).length   as 语法\nlet someVal: any = \u0026#34;a string\u0026#34; let strLength: number = (someVal as string).length   两种形式是等价的。至于使用哪个大多数情况下是凭个人喜好；然而，当在 TypeScript 里使用到 JSX 时，只有 as 形式的断言是被允许的。\nTypeScript 非空断言关键字 使用 ！来指定非空的变量，即告诉编译器值不能为 null。\nlet a: number | undefined = undefined let b: number = a! TypeScript 泛型 TypeScript 泛型写法和 Java 泛型相似：\n泛型方法：\nfunction add\u0026lt;T\u0026gt;(a: T, b: T): T { return a + b } 泛型接口：\ninterface GenericIdentityFn\u0026lt;T\u0026gt; { (arg: T): T; } function identity\u0026lt;T\u0026gt;(arg: T): T { return arg; } let myIdentity: GenericIdentityFn\u0026lt;number\u0026gt; = identity; 泛型类：\nclass GenericNumber\u0026lt;T\u0026gt; { zeroValue: T; add: (x: T, y: T) =\u0026gt; T; } 泛型约束：\n可以使用 extends 语法来约束泛型：\u0026lt;T extends Lengthwise\u0026gt;$\n泛型参数默认值：\n泛型参数可以指定默认值：\u0026lt;T = number\u0026gt;\n联合类型 使用 | 表示联合类型，类似 C 语言中的 union，可以表示多种类型中的一个：\nlet item: string | number | undefined 那么 item 可以是三种类型中的任意一种类型\n参考 语言更多特性参考官网文档：\nhttps://www.typescriptlang.org/docs/handbook/intro.html\n本文参考：\nhttps://sinoui.github.io/sinoui-guide/docs/ts-tutorial#%E6%B3%9B%E5%9E%8B%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC（讲的很全，不过有些地方讲的多了）\nhttps://blog.csdn.net/twypx/article/details/80290806（有些地方没讲全）\n","permalink":"https://jimall.github.io/posts/tech/typescript-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/","summary":"TypeScript 是 JavaScript 的超集，能够用类似写 Java 的体验（更准确说来更像 Kotlin）来写 JavaScript，很方便很快捷。\nTypeScript 类型 TypeScript 的数据类型分为 boolean, number, string, array, tuple, enum, object, null, undefined, any, void, never\n  布尔（boolean）类型\nlet flag: boolean = false 有 true 和 false 两个值\n  数字（number）类型\nlet num1: number = 1 let num2: number = 1.8 let num3: number = -1 各种数字都是 number 类型，并且支持二进制八进制和十六进制值\n  字符串（string）类型\nlet name: string = \u0026#34;typescript\u0026#34; 支持模板字符串，用反引号\nlet description: string = `${name}is good`   数组（array）类型","title":"TypeScript 简明教程"},{"content":"“爱好是很重要的” 记得高中某节课，兰素芹（我们语文老师）说：“爱好是很重要的，你们以后会体会到的”。当时的我当然不会苟同这句话，哪怕不考虑当时极强的”批判性思维“能力，就仅考虑高中环境塑造出的奋斗逼和唯分数论者属性，都足矣让我不屑地想到：”爱好有啥用，分数才是最关键的“。当然兰老师的这句话会时常在我中午学不下去揣球去球场的时候用来缓解摸鱼导致的焦虑（当时巨尼玛奋斗逼，中午十二点下课规定自己得学到十二点半以后），对于心态的调整有很大作用，四舍五入就是在我的高中生涯发挥了关键性的作用 xD。\n不过我当时不认可其实也没错，因为当时老师根据爱好很重要这一命题，引例到：\n 踢球好的男孩子受女孩子喜欢 有爱好能交到很多朋友，对于以后有很大帮助  这种外在的收益显然并不能让我满意，甚至会引起很大程度的不屑。并且，让人震怒的是！经过几年大学生涯，我发现第一例显然要考虑人与人之间的差距。我还记得随院篮球队去港中深和他们的逸夫书院（应该是偏文科的书院）打交流赛的时候，边上一堆女生，嘀咕 xxx 好帅什么的。然而，在南科大这样的理工科学校，被夸帅的时候仅仅在酒桌上，觥筹交错之间，几个男人商业互吹：“说实话，xxx 有点小帅”，“我也感觉你很帅♂”，直接进行一个泪的流😭。例子 2 倒是说的没啥问题，能交到朋友是爱好的一个很大意义，我确实通过爱好结识了一批好朋友，这些朋友也确实在很多时候给了我很多欢乐，给我带来很大的力量，不过今天话题不在与此，不作展开。\n爱好对于个人内在的价值 老师将爱好与实际收益联系，告诉我们爱好很重要，这确实是一个角度，是对于缺乏经历体会的人一种有效的引导方式。而我想说，在有一定的经历和体会之后，会发现爱好对于个人内在的价值是这些功利性的外在价值所难以比拟的。\n刚进入大学，经历的是小镇做题家到大学生的转变，生活不是很丰富，每天基本都在学习。当时不怎么逛 b 站、不玩游戏，以玩手机为耻。这样的生活很无聊， 虽然对于小镇做题家来说充满充实感，但是显然，这样的生活不可能维持太久，不管是学习太久精力不够还是人对于喜欢的东西的需求都会导致根本学不下去，这导致不论是学习状态还是个人心情，都不是很好，使得学习效果很差，同时个人能力也没有提升，只是学会了一些在后面将很快忘掉并且永远用不到的课本知识。这样的生活持续了很久，索性当时也稍微喜欢打打篮球，一切没有变得十分糟糕。\n可是，生活开始给自己开玩笑：课程学不懂，但发现自己也没有太大的学习动力去弥补，gpa 一落千丈。在这种低谷的时候，自己只会拿着书本嗯啃，啃不下来怪自己不行，继续啃，还是啃不下来。那么结果可想而知：生活变得一团糟，像是垂死挣扎的小虫，抖动着身体，用整个生命的力量挣扎着，结果却没有得到丝毫改善。在这个阶段，我很庆幸，自己有了自己热爱的一个东西——番剧。很清晰地记着，我的入坑作是《未闻花名》和《女高中生的虚度日常》，都是晚上睡不着熬夜看的，当时的感觉是十分奇妙的，像是开启了新大陆一般。于是我逐渐在很多个失意的夜里就着苦涩的咖啡和咸咸的泪水靠着番剧的陪伴度过最艰难的时光，于是我开始从一蹶不振到发奋上进。\n状态并不是一条直线，在大多数时候，它是一条沿着 baseline 上下起伏的曲线，会时常有最低谷和最高峰。在最高峰的时候，哪怕是读晦涩的论文，也能专注地干下去，在最低谷的时候，哪怕早上下床拿个充电器也嫌累。在高中的时候，我们离真正的生活很远，状态差仅仅是啥也不想学，而在大学，我们是完全自由的，生活的各个细节都由自己体味，于是状态差便是整个生活的改变。我们的爱好，会在我们低谷的时候静静陪伴着我们，帮助我们走出这些时光，帮助我们重拾信心。\n热爱让你在百无聊赖之时提起兴趣做事，热爱帮助我们度过凹凸起伏的人生中的低谷期，热爱在热情被生活打磨的灯枯油竭之时保留一份热情。\n什么是热爱 我理解的热爱，不仅仅要喜欢，更需要深入了解和尝试。因为喜欢仅仅是心理的感觉，更多时候可能是第一印象，深入之后，可能发现自己喜欢的和实际的完全不同。\n我的热爱  足球 追番 看书 游戏  打算尝试的\n pixiv 画师 长期贡献开源项目 摄影 （这可以列一个很长的 list）  ","permalink":"https://jimall.github.io/posts/thoughts/%E7%83%AD%E7%88%B1%E6%B0%B8%E5%AD%98/","summary":"“爱好是很重要的” 记得高中某节课，兰素芹（我们语文老师）说：“爱好是很重要的，你们以后会体会到的”。当时的我当然不会苟同这句话，哪怕不考虑当时极强的”批判性思维“能力，就仅考虑高中环境塑造出的奋斗逼和唯分数论者属性，都足矣让我不屑地想到：”爱好有啥用，分数才是最关键的“。当然兰老师的这句话会时常在我中午学不下去揣球去球场的时候用来缓解摸鱼导致的焦虑（当时巨尼玛奋斗逼，中午十二点下课规定自己得学到十二点半以后），对于心态的调整有很大作用，四舍五入就是在我的高中生涯发挥了关键性的作用 xD。\n不过我当时不认可其实也没错，因为当时老师根据爱好很重要这一命题，引例到：\n 踢球好的男孩子受女孩子喜欢 有爱好能交到很多朋友，对于以后有很大帮助  这种外在的收益显然并不能让我满意，甚至会引起很大程度的不屑。并且，让人震怒的是！经过几年大学生涯，我发现第一例显然要考虑人与人之间的差距。我还记得随院篮球队去港中深和他们的逸夫书院（应该是偏文科的书院）打交流赛的时候，边上一堆女生，嘀咕 xxx 好帅什么的。然而，在南科大这样的理工科学校，被夸帅的时候仅仅在酒桌上，觥筹交错之间，几个男人商业互吹：“说实话，xxx 有点小帅”，“我也感觉你很帅♂”，直接进行一个泪的流😭。例子 2 倒是说的没啥问题，能交到朋友是爱好的一个很大意义，我确实通过爱好结识了一批好朋友，这些朋友也确实在很多时候给了我很多欢乐，给我带来很大的力量，不过今天话题不在与此，不作展开。\n爱好对于个人内在的价值 老师将爱好与实际收益联系，告诉我们爱好很重要，这确实是一个角度，是对于缺乏经历体会的人一种有效的引导方式。而我想说，在有一定的经历和体会之后，会发现爱好对于个人内在的价值是这些功利性的外在价值所难以比拟的。\n刚进入大学，经历的是小镇做题家到大学生的转变，生活不是很丰富，每天基本都在学习。当时不怎么逛 b 站、不玩游戏，以玩手机为耻。这样的生活很无聊， 虽然对于小镇做题家来说充满充实感，但是显然，这样的生活不可能维持太久，不管是学习太久精力不够还是人对于喜欢的东西的需求都会导致根本学不下去，这导致不论是学习状态还是个人心情，都不是很好，使得学习效果很差，同时个人能力也没有提升，只是学会了一些在后面将很快忘掉并且永远用不到的课本知识。这样的生活持续了很久，索性当时也稍微喜欢打打篮球，一切没有变得十分糟糕。\n可是，生活开始给自己开玩笑：课程学不懂，但发现自己也没有太大的学习动力去弥补，gpa 一落千丈。在这种低谷的时候，自己只会拿着书本嗯啃，啃不下来怪自己不行，继续啃，还是啃不下来。那么结果可想而知：生活变得一团糟，像是垂死挣扎的小虫，抖动着身体，用整个生命的力量挣扎着，结果却没有得到丝毫改善。在这个阶段，我很庆幸，自己有了自己热爱的一个东西——番剧。很清晰地记着，我的入坑作是《未闻花名》和《女高中生的虚度日常》，都是晚上睡不着熬夜看的，当时的感觉是十分奇妙的，像是开启了新大陆一般。于是我逐渐在很多个失意的夜里就着苦涩的咖啡和咸咸的泪水靠着番剧的陪伴度过最艰难的时光，于是我开始从一蹶不振到发奋上进。\n状态并不是一条直线，在大多数时候，它是一条沿着 baseline 上下起伏的曲线，会时常有最低谷和最高峰。在最高峰的时候，哪怕是读晦涩的论文，也能专注地干下去，在最低谷的时候，哪怕早上下床拿个充电器也嫌累。在高中的时候，我们离真正的生活很远，状态差仅仅是啥也不想学，而在大学，我们是完全自由的，生活的各个细节都由自己体味，于是状态差便是整个生活的改变。我们的爱好，会在我们低谷的时候静静陪伴着我们，帮助我们走出这些时光，帮助我们重拾信心。\n热爱让你在百无聊赖之时提起兴趣做事，热爱帮助我们度过凹凸起伏的人生中的低谷期，热爱在热情被生活打磨的灯枯油竭之时保留一份热情。\n什么是热爱 我理解的热爱，不仅仅要喜欢，更需要深入了解和尝试。因为喜欢仅仅是心理的感觉，更多时候可能是第一印象，深入之后，可能发现自己喜欢的和实际的完全不同。\n我的热爱  足球 追番 看书 游戏  打算尝试的\n pixiv 画师 长期贡献开源项目 摄影 （这可以列一个很长的 list）  ","title":"热爱永存"},{"content":"足球可以说是我在大学中唯一的室外活动，虽然会的体育运动挺多，但是目前来说只玩玩足球了。\n从大一仅仅能够停停球，被很尊敬的队长吕派说“技术还是差点”（显然是高情商的说法），然后自己潜心练技术，水平太差，不好意思找人陪练，松禾体育场的观众席的墙便是我的陪练。功夫不负有心人，大三队长吕派评价：“已经练出来了“。听到这种评价的感觉是很奇妙的，远比作业满分，考试满分要让人亢奋。\n到了大学之后会发现，事实上这个阶段的自己已经具备了较强的学习能力，并且网上的资料和分享也不少，最关键的是持之以恒的努力和不畏艰难的意志。足球也不例外，不管是最为基础的停球脚弓传球还是各种花式的过人，在网上都能找到一个个细节抠的视频教程。\n学习的过程中，要想获得提升，琢磨是最关键的。一方面琢磨怎么提升，一方面在实践的过程中琢磨问题出在哪，如何改进。这个道理并不难懂，但是要做到事实上要下很大的功夫，就和学习英雄联盟中的对线一样，很多细节需要仔细抠，慢慢累积感觉，最终实现提升。\n下面记录一些足球训练的经验和教程：\n足球技巧 锁脚踝 https://www.bilibili.com/video/BV1px411r7ix?share_source=copy_web\n关键点：\n 两种锁脚踝的方法：翘脚尖和脚趾抓地 要做到在任意方向都能锁脚踝  锁脚踝不是一个技术，主要是一种习惯，要让自己的脚适应锁脚踝的感觉。\n传接球 足弓传球要点：\nhttps://www.bilibili.com/video/BV1Ni4y1E7DQ\n大脚长传：\nhttps://www.bilibili.com/video/BV1E4411p74V/?spm_id_from=333.788.recommend_more_video.-1\n传接球训练：\nhttps://www.bilibili.com/video/BV1XE411k73e\n这个视频的动作其实相对难，前面的动作要求左右脚较强的均衡能力，后面的动作还要求颠球练的很好。不过对墙练习个人认为是一种很有效的方式，可以在较菜的情况下稳步提升自己的水平，既不会被队友坑也不会坑队友。\n关键点：\n 传球不别扭 接球接准，能随心所欲控制方向  ","permalink":"https://jimall.github.io/posts/thoughts/%E8%B6%B3%E7%90%83%E8%AE%AD%E7%BB%83/","summary":"足球可以说是我在大学中唯一的室外活动，虽然会的体育运动挺多，但是目前来说只玩玩足球了。\n从大一仅仅能够停停球，被很尊敬的队长吕派说“技术还是差点”（显然是高情商的说法），然后自己潜心练技术，水平太差，不好意思找人陪练，松禾体育场的观众席的墙便是我的陪练。功夫不负有心人，大三队长吕派评价：“已经练出来了“。听到这种评价的感觉是很奇妙的，远比作业满分，考试满分要让人亢奋。\n到了大学之后会发现，事实上这个阶段的自己已经具备了较强的学习能力，并且网上的资料和分享也不少，最关键的是持之以恒的努力和不畏艰难的意志。足球也不例外，不管是最为基础的停球脚弓传球还是各种花式的过人，在网上都能找到一个个细节抠的视频教程。\n学习的过程中，要想获得提升，琢磨是最关键的。一方面琢磨怎么提升，一方面在实践的过程中琢磨问题出在哪，如何改进。这个道理并不难懂，但是要做到事实上要下很大的功夫，就和学习英雄联盟中的对线一样，很多细节需要仔细抠，慢慢累积感觉，最终实现提升。\n下面记录一些足球训练的经验和教程：\n足球技巧 锁脚踝 https://www.bilibili.com/video/BV1px411r7ix?share_source=copy_web\n关键点：\n 两种锁脚踝的方法：翘脚尖和脚趾抓地 要做到在任意方向都能锁脚踝  锁脚踝不是一个技术，主要是一种习惯，要让自己的脚适应锁脚踝的感觉。\n传接球 足弓传球要点：\nhttps://www.bilibili.com/video/BV1Ni4y1E7DQ\n大脚长传：\nhttps://www.bilibili.com/video/BV1E4411p74V/?spm_id_from=333.788.recommend_more_video.-1\n传接球训练：\nhttps://www.bilibili.com/video/BV1XE411k73e\n这个视频的动作其实相对难，前面的动作要求左右脚较强的均衡能力，后面的动作还要求颠球练的很好。不过对墙练习个人认为是一种很有效的方式，可以在较菜的情况下稳步提升自己的水平，既不会被队友坑也不会坑队友。\n关键点：\n 传球不别扭 接球接准，能随心所欲控制方向  ","title":"足球训练"},{"content":"加密算法涉及一些概念：数字签名、数据加密解密、加密算法、对称加密算法、非对称加密算法、单向加密算法。下面进行介绍。\n加密和解密 加密和解密主要是为了防止传输过程中的数据泄露，因为传输过程中不免会被抓包什么的。\n数据加密的基本过程，就是对原来为明文的文件或数据按某种算法进行处理，使其成为不可读的一段代码，通常称为密文。这样，发送的过程中，不会被非法人窃取，因为别人看不懂加密后的东西是啥。\n加密的逆过程为解密，即将”密文“转化为其原来数据的过程，因为传输后需要使用数据，不可能用加密后的看不懂的密文。\n加密算法及应用 加密算法分为对称加密算法、非对称加密算法、单向加密算法。\n对称加密算法 对称加密算法是应用较早的加密算法，又称为共享密钥加密算法。在对称加密算法中，使用的密钥只有一个，发送和接收双方都使用这个密钥对数据进行加密和解密。这就要求加密和解密方事先都必须知道加密的密钥。\n数据加密过程：在对称加密算法中，数据发送方将明文（原始数据）和加密密钥一起经过特殊加密处理，生成复杂的加密密文进行发送。\n数据解密过程：数据接收方收到密文后，若想读取原数据，则需要使用加密使用的密钥及相同算法的逆算法对加密的密文进行解密，才能使其恢复成可读明文。\n这个道理可以这样理解：我们写 markdown，规则定好了，比如 # 表示一级标题（相当于秘钥），所以我这边就这样写一级标题（加密），然后发给你，因为采用一样的规则，你也解读成一级标题（解密），这样信息在两边就相同了。有人看到了我写的东西（密文），但是他不知道这个规则，他就不知道我写的东西究竟是啥。\n对称加密算法的优缺点：\n 优点：操作比较简单，加密速度快，秘钥简单。经常在消息发送方需要加密大量数据时使用。 缺点：秘钥存在传输泄露风险。因为新增一个协作方的时候，它需要秘钥来进行加密和解密，所以我们要把秘钥发给对方，那么这个过程中秘钥如果泄露，无论谁给我们发消息，获取秘钥的人都可以用这个秘钥去解密，相当于没有加密发消息（类似于抗战时期我方的密码本被敌方截获了，那敌方肯定啥都知道了）。  常用对称加密算法：DES，3DES，AES 等。在 jdk 中都有封装。\n非对称加密算法 非对称加密算法，又称为公开密钥加密算法，顾名思义就是加密与解密的过程不是对称的，不使用同一个秘钥。它需要两个密钥，一个称为公开密钥 (public key)，即公钥，另一个称为私有密钥 (private key)，即私钥。公钥和私钥是结对的，生成的时候会生成一对公私钥对。\n这种算法的特点是：\n 使用公钥对数据进行加密，只有用对应的私钥才能进行解密。 使用私钥对数据进行加密，只有用对应的公钥才能进行解密。  这里的关键点在于，公钥加密的消息只能私钥解密。使用时由接收方生成公私钥对，然后将公钥传给发送方，私钥保存在服务器上，不进行任何传输，这样就不会泄露（除非有内鬼）。这种情况下，和对称加密不同，公钥可以随意分发给发送方，甚至泄漏到网上也没事，一个黑客拿着公钥没有办法解读别人发给我们的信息，所以秘钥的传输是安全的，不用担心泄露，解决了对称传输中秘钥传输泄露的问题。\n非对称算法的缺点在于运算速度较慢。\n常用的非对称加密算法有：RSA、DSA、ECC 等。\n单向加密算法 单向加密算法又称为不可逆加密算法，实际上就是哈希算法。它只能对明文数据进行加密，而不能对加密了的密文数据再解密成原来的明文数据，所以称为单向加密。\n单向加密的特点也就是哈希算法的特点：\n 任意两段明文数据，加密以后的密文数据一定是不相同的 任意一段明文数据，经过加密以后，其密文数据永远是相同的  单向加密的关键在于其应用：\n 当用户注册一个新的账号时，其用户密码信息不是直接保存到数据库，而是经过单向加密后再保存，这样，即使这些账号信息被泄露，别人也不能得到相应的用户密码，因为单向加密没有办法进行解密，当然也就达不到盗窃账号的目的。 用户 Login 的时候，系统对用户输入的密码进行单向加密，然后再去和系统中保存的加密值进行比较，但系统中并没有存明文密码，所以我们不会知道密码是什么。 由于一样的文件，产生加密值是相同的，所以可以进行文件完整性检测。  常用的单向加密算法有 MD5、SHA\n提到单向加密算法经常会提到 BASE64 编码。目前 BASE64 已经成为网络上常见的传输 8Bit 字节代码的编码方式之一。\n在参数传输的过程中经常遇到的一种情况：使用全英文的没问题，但一旦涉及到中文就会出现乱码情况。与此类似，网络上传输的字符并不全是可打印的字符，比如二进制文件、图片等。Base64 的出现就是为了解决此问题，它是基于 64 个可打印的字符来表示二进制的数据的一种方法。\n电子邮件刚问世的时候，只能传输英文，但后来随着用户的增加，中文、日文等文字的用户也有需求，但这些字符并不能被服务器或网关有效处理，因此 Base64 就登场了。随之，Base64 在 URL、Cookie、网页传输少量二进制文件中也有相应的使用。\n各个加密算法比较 数字签名、数字证书和 HTTPS 参考阅读  浅谈常见的七种加密算法及实现：了解加密算法相关的大致框架，各个知识点解释的没那么清楚 加解密算法最详解：了解各种加密算法 加密算法常识：单向加密的应用写的很好 一篇文章彻底弄懂 BASE64 编码原理：关于 BASE64 编码 数字签名是什么？：数字签名、数字证书和 https 极为通俗的解释，阮一峰永远的神，推荐阅读✅  ","permalink":"https://jimall.github.io/posts/tech/06.encryption/","summary":"加密算法涉及一些概念：数字签名、数据加密解密、加密算法、对称加密算法、非对称加密算法、单向加密算法。下面进行介绍。\n加密和解密 加密和解密主要是为了防止传输过程中的数据泄露，因为传输过程中不免会被抓包什么的。\n数据加密的基本过程，就是对原来为明文的文件或数据按某种算法进行处理，使其成为不可读的一段代码，通常称为密文。这样，发送的过程中，不会被非法人窃取，因为别人看不懂加密后的东西是啥。\n加密的逆过程为解密，即将”密文“转化为其原来数据的过程，因为传输后需要使用数据，不可能用加密后的看不懂的密文。\n加密算法及应用 加密算法分为对称加密算法、非对称加密算法、单向加密算法。\n对称加密算法 对称加密算法是应用较早的加密算法，又称为共享密钥加密算法。在对称加密算法中，使用的密钥只有一个，发送和接收双方都使用这个密钥对数据进行加密和解密。这就要求加密和解密方事先都必须知道加密的密钥。\n数据加密过程：在对称加密算法中，数据发送方将明文（原始数据）和加密密钥一起经过特殊加密处理，生成复杂的加密密文进行发送。\n数据解密过程：数据接收方收到密文后，若想读取原数据，则需要使用加密使用的密钥及相同算法的逆算法对加密的密文进行解密，才能使其恢复成可读明文。\n这个道理可以这样理解：我们写 markdown，规则定好了，比如 # 表示一级标题（相当于秘钥），所以我这边就这样写一级标题（加密），然后发给你，因为采用一样的规则，你也解读成一级标题（解密），这样信息在两边就相同了。有人看到了我写的东西（密文），但是他不知道这个规则，他就不知道我写的东西究竟是啥。\n对称加密算法的优缺点：\n 优点：操作比较简单，加密速度快，秘钥简单。经常在消息发送方需要加密大量数据时使用。 缺点：秘钥存在传输泄露风险。因为新增一个协作方的时候，它需要秘钥来进行加密和解密，所以我们要把秘钥发给对方，那么这个过程中秘钥如果泄露，无论谁给我们发消息，获取秘钥的人都可以用这个秘钥去解密，相当于没有加密发消息（类似于抗战时期我方的密码本被敌方截获了，那敌方肯定啥都知道了）。  常用对称加密算法：DES，3DES，AES 等。在 jdk 中都有封装。\n非对称加密算法 非对称加密算法，又称为公开密钥加密算法，顾名思义就是加密与解密的过程不是对称的，不使用同一个秘钥。它需要两个密钥，一个称为公开密钥 (public key)，即公钥，另一个称为私有密钥 (private key)，即私钥。公钥和私钥是结对的，生成的时候会生成一对公私钥对。\n这种算法的特点是：\n 使用公钥对数据进行加密，只有用对应的私钥才能进行解密。 使用私钥对数据进行加密，只有用对应的公钥才能进行解密。  这里的关键点在于，公钥加密的消息只能私钥解密。使用时由接收方生成公私钥对，然后将公钥传给发送方，私钥保存在服务器上，不进行任何传输，这样就不会泄露（除非有内鬼）。这种情况下，和对称加密不同，公钥可以随意分发给发送方，甚至泄漏到网上也没事，一个黑客拿着公钥没有办法解读别人发给我们的信息，所以秘钥的传输是安全的，不用担心泄露，解决了对称传输中秘钥传输泄露的问题。\n非对称算法的缺点在于运算速度较慢。\n常用的非对称加密算法有：RSA、DSA、ECC 等。\n单向加密算法 单向加密算法又称为不可逆加密算法，实际上就是哈希算法。它只能对明文数据进行加密，而不能对加密了的密文数据再解密成原来的明文数据，所以称为单向加密。\n单向加密的特点也就是哈希算法的特点：\n 任意两段明文数据，加密以后的密文数据一定是不相同的 任意一段明文数据，经过加密以后，其密文数据永远是相同的  单向加密的关键在于其应用：\n 当用户注册一个新的账号时，其用户密码信息不是直接保存到数据库，而是经过单向加密后再保存，这样，即使这些账号信息被泄露，别人也不能得到相应的用户密码，因为单向加密没有办法进行解密，当然也就达不到盗窃账号的目的。 用户 Login 的时候，系统对用户输入的密码进行单向加密，然后再去和系统中保存的加密值进行比较，但系统中并没有存明文密码，所以我们不会知道密码是什么。 由于一样的文件，产生加密值是相同的，所以可以进行文件完整性检测。  常用的单向加密算法有 MD5、SHA\n提到单向加密算法经常会提到 BASE64 编码。目前 BASE64 已经成为网络上常见的传输 8Bit 字节代码的编码方式之一。\n在参数传输的过程中经常遇到的一种情况：使用全英文的没问题，但一旦涉及到中文就会出现乱码情况。与此类似，网络上传输的字符并不全是可打印的字符，比如二进制文件、图片等。Base64 的出现就是为了解决此问题，它是基于 64 个可打印的字符来表示二进制的数据的一种方法。\n电子邮件刚问世的时候，只能传输英文，但后来随着用户的增加，中文、日文等文字的用户也有需求，但这些字符并不能被服务器或网关有效处理，因此 Base64 就登场了。随之，Base64 在 URL、Cookie、网页传输少量二进制文件中也有相应的使用。","title":"加密算法"},{"content":"前段时间，看到甘肃马拉松赛的惨剧：https://www.zhihu.com/question/460921357，在比赛中，好几位经验丰富的跑者，因为恶劣天气失温最终去世，这让我对失温症产生了敬畏。\n在想到失温是一种后果很严重的情况后，就跑去刷如何处理失温啥的，刷着刷着，就刷到了推车穿越无人区的话题，大概是因为穿越无人区，防止失温是其中一个很关键的话题，又由无人区刷到《北方的空地》这篇帖子。这是一篇作者记录自己穿越大羌塘无人区的帖子，给我带来很大震撼：https://bbs.8264.com/forum-viewthread-tid-512349-extra\u0026ndash;authorid-33896449-page-1.html，推荐大家去看一看✅。\n穿越无人区，是一种冒险行为，风险很大，不仅会遇上恶劣的天气，还可能遭遇野生动物的攻击，并且生存所需的水和食物可能在中途就不够了（所以帖子的作者要推自行车而不是背包步行穿越无人区，这样能尽量多带装备和食品），中间只要有一环出现了问题，就走不出来暴尸荒野了。\n穿越无人区，需要有过硬的户外生存知识。比如知道如何应对不同的野生动物，人的身体能力相对于野生动物实在是差距甚大，即使是印象中笨重的熊跑起来也比世界上跑的最快的人要快，如果让它们对自己产生了兴趣，那基本没可能活下来。比如依靠指南针等设备进行定位和寻路的能力，显然，无人区没有高德地图，想要中途跑路需要知道该怎么走，这需要人自己判断。比如维修装备的能力，在无人区中，有一些装备是重要的，比如指南针、自行车，不可能坏了就不用了，需要自己修。还有很多很多别的户外生存知识，只有各种知识尽量完善了，才能有希望在环境恶劣的无人区中活下来，网上一些说走就走穿越无人区的行为无异于送死。\n在无人区生存，对于身体、心理上都是考验。身体上的考验自然不用多说，恶劣的环境会让人伤痕累累，会让人疲惫不堪。在心理上，生理上的疲惫势必会导致心理上的疲惫，同时，由于需要走出无人区，对于食物每天的配比，需要精确到克，防止后期食物不足走不出去，并且食物种类有限，带的调味料量也有限，这样的伙食条件持续久了，极容易让人感觉嘴馋想多吃些，然而又不能多吃，不然后面不够吃了要饿死，这就对人是一种很大的考验。不过无人区的美景对人的心理倒是很大的慰藉，大自然的鬼斧神工是人难以想象的，美不胜收的风景不也正是人们冒名前来的缘由之一吗，自由的景致、脱俗的风光，是人们痴迷这儿的很大原因。\n同时，即使各方面要素都具备了，也需要运气成分，特别是作者穿越的大羌塘无人区很大、环境很恶劣，这种情况下，运气成分可以说占了相当一部分。可能，运气不好，穿过一个山谷正好遇到饥肠辘辘的狼群，可能遇到把人卷起来的沙尘暴，可能阴雨连绵被大河围困，即使做好了万全的准备，也可能逃不过那个要命的可能。所以，穿越无人区，更需要很大的勇气，因为一旦失败，就是死。\n我觉得，大自然的美是毋庸置疑的，想象自己行路其中，胜收美景，对于心理的震撼与治愈是不言而喻的。穿越无人区，给人带来兴奋的更是自己综合能力的体现，自己通过自己的能力，通过自己的思维判断，去穿越无人区，去收获沿途美景，并且赌上的是自己的命，这能够成功，确实是人综合能力的体现，是值得骄傲的。我不喜欢和别人一起去看自然风光，大概是因为我很讨厌附和别人“真美真美，确实确实“，如果自己背上背包，一对一和大自然对话，这种感觉会是好的。\n以后一定要找一些野外宿营的机会，这种自由的感觉，我痴迷。\n","permalink":"https://jimall.github.io/posts/thoughts/%E5%8C%97%E6%96%B9%E7%9A%84%E7%A9%BA%E5%9C%B0/","summary":"前段时间，看到甘肃马拉松赛的惨剧：https://www.zhihu.com/question/460921357，在比赛中，好几位经验丰富的跑者，因为恶劣天气失温最终去世，这让我对失温症产生了敬畏。\n在想到失温是一种后果很严重的情况后，就跑去刷如何处理失温啥的，刷着刷着，就刷到了推车穿越无人区的话题，大概是因为穿越无人区，防止失温是其中一个很关键的话题，又由无人区刷到《北方的空地》这篇帖子。这是一篇作者记录自己穿越大羌塘无人区的帖子，给我带来很大震撼：https://bbs.8264.com/forum-viewthread-tid-512349-extra\u0026ndash;authorid-33896449-page-1.html，推荐大家去看一看✅。\n穿越无人区，是一种冒险行为，风险很大，不仅会遇上恶劣的天气，还可能遭遇野生动物的攻击，并且生存所需的水和食物可能在中途就不够了（所以帖子的作者要推自行车而不是背包步行穿越无人区，这样能尽量多带装备和食品），中间只要有一环出现了问题，就走不出来暴尸荒野了。\n穿越无人区，需要有过硬的户外生存知识。比如知道如何应对不同的野生动物，人的身体能力相对于野生动物实在是差距甚大，即使是印象中笨重的熊跑起来也比世界上跑的最快的人要快，如果让它们对自己产生了兴趣，那基本没可能活下来。比如依靠指南针等设备进行定位和寻路的能力，显然，无人区没有高德地图，想要中途跑路需要知道该怎么走，这需要人自己判断。比如维修装备的能力，在无人区中，有一些装备是重要的，比如指南针、自行车，不可能坏了就不用了，需要自己修。还有很多很多别的户外生存知识，只有各种知识尽量完善了，才能有希望在环境恶劣的无人区中活下来，网上一些说走就走穿越无人区的行为无异于送死。\n在无人区生存，对于身体、心理上都是考验。身体上的考验自然不用多说，恶劣的环境会让人伤痕累累，会让人疲惫不堪。在心理上，生理上的疲惫势必会导致心理上的疲惫，同时，由于需要走出无人区，对于食物每天的配比，需要精确到克，防止后期食物不足走不出去，并且食物种类有限，带的调味料量也有限，这样的伙食条件持续久了，极容易让人感觉嘴馋想多吃些，然而又不能多吃，不然后面不够吃了要饿死，这就对人是一种很大的考验。不过无人区的美景对人的心理倒是很大的慰藉，大自然的鬼斧神工是人难以想象的，美不胜收的风景不也正是人们冒名前来的缘由之一吗，自由的景致、脱俗的风光，是人们痴迷这儿的很大原因。\n同时，即使各方面要素都具备了，也需要运气成分，特别是作者穿越的大羌塘无人区很大、环境很恶劣，这种情况下，运气成分可以说占了相当一部分。可能，运气不好，穿过一个山谷正好遇到饥肠辘辘的狼群，可能遇到把人卷起来的沙尘暴，可能阴雨连绵被大河围困，即使做好了万全的准备，也可能逃不过那个要命的可能。所以，穿越无人区，更需要很大的勇气，因为一旦失败，就是死。\n我觉得，大自然的美是毋庸置疑的，想象自己行路其中，胜收美景，对于心理的震撼与治愈是不言而喻的。穿越无人区，给人带来兴奋的更是自己综合能力的体现，自己通过自己的能力，通过自己的思维判断，去穿越无人区，去收获沿途美景，并且赌上的是自己的命，这能够成功，确实是人综合能力的体现，是值得骄傲的。我不喜欢和别人一起去看自然风光，大概是因为我很讨厌附和别人“真美真美，确实确实“，如果自己背上背包，一对一和大自然对话，这种感觉会是好的。\n以后一定要找一些野外宿营的机会，这种自由的感觉，我痴迷。","title":"北方的空地"},{"content":"在 Git 项目中，需要包含别的 Git 项目，我们希望能够独立的使用这两个项目。比如我们的博客是一个 Git 项目，而我们需要在博客中包含别人的项目作为博客主题，我们希望能够在自己写博文后 push 不影响博客主题仓库，同时希望能够独立使用主题仓库，这样我们就可以获取最新的主题。\n这个时候需要用到 git submodule。在使用 submodule 之后，两个项目便相对独立（或者多个 submodule，那么就是多个项目相对独立）。下面介绍子模块常用的用法：\n使用子模块 添加子模块 在 Git 项目中包含别的 Git 项目，不能够直接到相应文件夹 clone，而需要使用 git add submodule 命令，可以将这个命令视为子模块版本的 git clone。\ngit add submodule git@github.com/example/example.git submodule 上面的命令将项目克隆到 submodule 目录。会发现根目录生成了一个 .gitmodule 文件，这个文件用于保存子模块信息。\n查看子模块 使用 git submodule 命令查看当前项目的子模块。\n更新子模块 在项目中使用 git update 父模块并不会更新子模块。（别的操作同理，我们在项目中使用的各种以前使用的 git 操作都只会对父模块产生作用）\n使用 git submodule add 添加子项目。\n操作子模块 在子模块的文件夹内部，我们的各种操作都是对子模块的项目产生作用，比如 push 就是将子模块 push 到子模块的 remote repository。\n所以需要单独修改子模块，只需要 cd 到子模块内，把子模块当成一个普通的 git 项目即可。\n克隆含有子模块的项目 克隆包含子模块的项目有两种方法：\n 先克隆父项目，再更新子模块 递归克隆整个项目。  先克隆父项目，再更新子模块 这种方法有以下步骤：\n 克隆父项目：git clone xxx。注意这种情况下，像之前说的，在父项目中的操作，只对父项目产生作用，所以子项目不会被 clone。 查看子模块：git submodule。会发现子模块前面有一个 -，说明子模块文件还未被 clone（为空文件夹）。 $ git submodule -e33f854d3f51f5ebd771a68da05ad0371a3c0570 xxx  初始化子模块：git submodule init。在父模块 clone 之后运行一次，就行了。 更新子模块：git submodule update。运行后子模块被 clone，整个项目就 ready 了。  递归克隆整个项目 clone 的时候，添加 --recursive 指令，递归克隆子模块，一步到位。\ngit clone xxxx --recursive 删除子模块 删除子模块比较麻烦，需要手动删除相关的文件，否则在添加子模块时有可能出现错误\n以删除 assets 文件夹为例\n  删除子模块文件夹\n$ git rm --cached assets $ rm -rf assets   删除 .gitmodules 文件中相关子模块信息\n[submodule \u0026#34;assets\u0026#34;] path = assets url = https://github.com/maonx/vimwiki-assets.git   删除 .git/config 中的相关子模块信息\n[submodule \u0026#34;assets\u0026#34;] url = https://github.com/maonx/vimwiki-assets.git   删除 .git 文件夹中的相关子模块文件\n$ rm -rf .git/modules/assets   ","permalink":"https://jimall.github.io/posts/tech/05.gitsubmodule/","summary":"在 Git 项目中，需要包含别的 Git 项目，我们希望能够独立的使用这两个项目。比如我们的博客是一个 Git 项目，而我们需要在博客中包含别人的项目作为博客主题，我们希望能够在自己写博文后 push 不影响博客主题仓库，同时希望能够独立使用主题仓库，这样我们就可以获取最新的主题。\n这个时候需要用到 git submodule。在使用 submodule 之后，两个项目便相对独立（或者多个 submodule，那么就是多个项目相对独立）。下面介绍子模块常用的用法：\n使用子模块 添加子模块 在 Git 项目中包含别的 Git 项目，不能够直接到相应文件夹 clone，而需要使用 git add submodule 命令，可以将这个命令视为子模块版本的 git clone。\ngit add submodule git@github.com/example/example.git submodule 上面的命令将项目克隆到 submodule 目录。会发现根目录生成了一个 .gitmodule 文件，这个文件用于保存子模块信息。\n查看子模块 使用 git submodule 命令查看当前项目的子模块。\n更新子模块 在项目中使用 git update 父模块并不会更新子模块。（别的操作同理，我们在项目中使用的各种以前使用的 git 操作都只会对父模块产生作用）\n使用 git submodule add 添加子项目。\n操作子模块 在子模块的文件夹内部，我们的各种操作都是对子模块的项目产生作用，比如 push 就是将子模块 push 到子模块的 remote repository。\n所以需要单独修改子模块，只需要 cd 到子模块内，把子模块当成一个普通的 git 项目即可。\n克隆含有子模块的项目 克隆包含子模块的项目有两种方法：","title":"git submodule 的使用"},{"content":"使用 hugo 写博客的时候，每次增加文章，需要本地构建之后发布到 github 上通过 github pages 服务展示页面，不难想到可以使用 CI 的方法，将构建的过程自动化，实现写博文 push 到 github 即可自动构建并发布到 github pages。\n搞的过程中坑比较多，记录为一个教程，供各位参考。\n我折腾过程中的参考：https://tianhui.xin/blog/2019/11/17/hugousegithubactionstopages/\n创建代码仓库和 github pages 仓库 构建过程中采用两个仓库：\n 代码仓库，github pages 在这里构建并发布，我们设为 username.github.io.source github pages 仓库，用于存放构建好的文件，github pages 服务会根据构建好的文件展示我们的博。客，我们设为 username.github.io （username 改为你自己的 github username）  简单说来就是根据代码仓库的文件构建，构建好之后发布到 github pages 仓库，github pages 仓库由于有 github 提供的服务，会自动展示我们的 blog。\n创建 github pages 仓库 没啥特别，github 上创建一个空仓库 username.github.io\n创建代码仓库 这个仓库和我们本地直接关联，创建有一些细节需要注意，我下面的过程给各位参考：\n  github 创建空仓库 username.github.io.source\n  本地找个空文件夹，比如叫 HugoBlog，进去之后初始化 Hugo Blog：hugo new site .   初始化 git 仓库：git init   添加主题文件，这步需要注意，需要使用 git submodule 来进行（照着做就完了，不需要深入了解），比如我这边采用的主题文件为 joway/hugo-theme-yinyang，那么命令为：git submodule add git@github.com:joway/hugo-theme-yinyang.git themes/yinyang   然后根据主题去配置去添加文章，用 hugo serve 看看效果，确定配置没问题\n  然后是关键的一部，添加 workflows 文件，用于 github actions 构建。创建 .github/workflows/gh-pages.yml 文件，将下面的内容复制进去，并且根据自己的情况修改下面 TODO 表明的类。\nname:github pages CI# 自动化的名称，随便取on:push:# push的时候触发branches:- main# TODO 改成 username.github.io.source 的对应主分支jobs:build:runs-on:ubuntu-lateststeps:- name:checkoutuses:actions/checkout@masterwith:submodules:true- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;0.83.1\u0026#39;extended:true- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}# 这个 ACTIONS_DEPLOY_KEY 需要注意，后面会用到external_repository:username/username.github.io# TODO 改成对应的仓库名publish_branch:main# TODO 发布到 username.github.io 的相应分支publish_dir:./public需要知道的是，基本上最后搞不出来都会是因为这个文件，所以务必仔细检查配置，如果配置正确的情况下还是出现问题那么需要去看 hugo github actions 的提供方的文档，也就是 peaceiris/actions-gh-pages 这个项目。（我就是网上折腾了好久发现是配置不对 xD）\n  添加公钥和私钥。代码仓库需要有 github pages 的写入权限，需要添加公钥和私钥：（注意这个和 github 添加 ssh 链接的私钥不一样，无论如何都要做这一步）\n 使用 ssh-keygen -t rsa -b 4096 -C \u0026quot;$(git config user.email)\u0026quot; 创建公钥私钥，在当前文件夹生成即可：  将生产后的私钥（不带后缀名的）添加到代码仓库，仓库的 Settings 中点击 Secrets，然后添加咱们刚刚生成的私钥，name 为 ACTIONS_DEPLOY_KEY，注意 name 一定要是这个，因为上面的文件中配置的是这个名字 然后将公钥（带 pub 后缀名的）添加到 github pages 仓库，Settings 中点击 Deploy keys，添加公钥，Allow write access一定要勾上，否则会无法提交 公钥和私钥可以删掉，后面不需要了    将代码仓库 add commit push 到远程，基本操作，不多赘述\n  查看代码仓库的 actions，这个时候基本会 build 完成，如果失败了仔细检查步骤。\n  others 本次折腾过程中看到一些不了解的东西，打算去折腾一下：\n 非对称加密 git submodule  ","permalink":"https://jimall.github.io/posts/tech/04.hugoactions/","summary":"使用 hugo 写博客的时候，每次增加文章，需要本地构建之后发布到 github 上通过 github pages 服务展示页面，不难想到可以使用 CI 的方法，将构建的过程自动化，实现写博文 push 到 github 即可自动构建并发布到 github pages。\n搞的过程中坑比较多，记录为一个教程，供各位参考。\n我折腾过程中的参考：https://tianhui.xin/blog/2019/11/17/hugousegithubactionstopages/\n创建代码仓库和 github pages 仓库 构建过程中采用两个仓库：\n 代码仓库，github pages 在这里构建并发布，我们设为 username.github.io.source github pages 仓库，用于存放构建好的文件，github pages 服务会根据构建好的文件展示我们的博。客，我们设为 username.github.io （username 改为你自己的 github username）  简单说来就是根据代码仓库的文件构建，构建好之后发布到 github pages 仓库，github pages 仓库由于有 github 提供的服务，会自动展示我们的 blog。\n创建 github pages 仓库 没啥特别，github 上创建一个空仓库 username.github.io\n创建代码仓库 这个仓库和我们本地直接关联，创建有一些细节需要注意，我下面的过程给各位参考：\n  github 创建空仓库 username.github.io.source\n  本地找个空文件夹，比如叫 HugoBlog，进去之后初始化 Hugo Blog：hugo new site .","title":"使用 Github actions 自动发布 Hugo 博客"},{"content":"在一个项目中，并不是所有的文件都需要使用 Git 进行版本管理，比如一些自动生成的文件，这时候可以在项目中添加 .gitignore 文件来忽略一些不需要进行版本管理的文件。\n.gitignore 有一套语法，下面介绍一下：\n.gitignore 文件语法 首先 .gitignore 文件每一行定义一条规则，从上到下进行解释的。\n注释 使用 # 行注释\n通配符匹配 .gitignore 可以使用通配符匹配，并且常常用到（* 用的比较多）\n* 表示一个或多个字符\n[] 表示范围\n? 表示单个字符\n忽略文件和否定忽略文件 每一行，写路径即可忽略掉相应的内容，在路径前使用 ! 即可取消忽略相应路径，比如：\n# 忽略 .exe 文件 *.exe # 否定忽略 main.exe，由于文件是从上到下进行解释的，所以上下两条规则的意思是忽略除了 main.exe 的所有 .exe 文件 !main.exe # 忽略 build 文件夹 build/ 防止递归 直接制定文件名，实际上是递归的忽略，也就是说 *.exe 会忽略目录下的所有 .exe 文件。\n使用 / 防止递归：\n# 仅在当前目录下忽略 temp 文件， 但不包括子目录下的 subdir/temp /temp # 忽略 build/ 文件夹下的所有文件 build/ # 忽略 doc/notes.txt, 不包括 doc/server/arch.txt doc/*.txt # 忽略所有的 .pdf 文件 在 doc/ 下的所有 .txt 文件 doc/**/*.txt gitignore vscode 插件 vscode 有 gitignore 插件可以帮助我们写 .gitignore 文件，在 extension store 下载，使用 CTRL+SHIFT+P 运行 add gitignore 可以自动生成不同语言的 .gitignore 文件模板，同时可以将当前文件 add .gitignore。\n","permalink":"https://jimall.github.io/posts/tech/03.gitignore/","summary":"在一个项目中，并不是所有的文件都需要使用 Git 进行版本管理，比如一些自动生成的文件，这时候可以在项目中添加 .gitignore 文件来忽略一些不需要进行版本管理的文件。\n.gitignore 有一套语法，下面介绍一下：\n.gitignore 文件语法 首先 .gitignore 文件每一行定义一条规则，从上到下进行解释的。\n注释 使用 # 行注释\n通配符匹配 .gitignore 可以使用通配符匹配，并且常常用到（* 用的比较多）\n* 表示一个或多个字符\n[] 表示范围\n? 表示单个字符\n忽略文件和否定忽略文件 每一行，写路径即可忽略掉相应的内容，在路径前使用 ! 即可取消忽略相应路径，比如：\n# 忽略 .exe 文件 *.exe # 否定忽略 main.exe，由于文件是从上到下进行解释的，所以上下两条规则的意思是忽略除了 main.exe 的所有 .exe 文件 !main.exe # 忽略 build 文件夹 build/ 防止递归 直接制定文件名，实际上是递归的忽略，也就是说 *.exe 会忽略目录下的所有 .exe 文件。\n使用 / 防止递归：\n# 仅在当前目录下忽略 temp 文件， 但不包括子目录下的 subdir/temp /temp # 忽略 build/ 文件夹下的所有文件 build/ # 忽略 doc/notes.","title":".gitignore 的写法"},{"content":"Java计算天数差 import java.time.Duration; import java.time.LocalDate; import java.time.format.DateTimeFormatter; import java.util.Scanner; public class Q4 { public static void main(String[] args) { Scanner in = new Scanner(System.in); LocalDate from = LocalDate.parse(in.next(), DateTimeFormatter.BASIC_ISO_DATE); LocalDate to = LocalDate.parse(\u0026#34;20210917\u0026#34;, DateTimeFormatter.BASIC_ISO_DATE); in.close(); Duration diff = Duration.between(from.atStartOfDay(), to.atStartOfDay()); System.out.println(diff.toDays()); } } import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Scanner; public class Q4_2 { public static void main(String[] args) { SimpleDateFormat dateFormat = new SimpleDateFormat(\u0026#34;yyyyMMdd\u0026#34;); try { Scanner in = new Scanner(System.in); Date from = dateFormat.parse(in.next()); Date to = dateFormat.parse(\u0026#34;20210917\u0026#34;); in.close(); long millisDiff = to.getTime() - from.getTime(); System.out.println(millisDiff / (24 * 60 * 60 * 1000)); } catch (ParseException e) { e.printStackTrace(); } } } ","permalink":"https://jimall.github.io/posts/tech/java%E8%AE%A1%E7%AE%97%E5%A4%A9%E6%95%B0%E5%B7%AE/","summary":"Java计算天数差 import java.time.Duration; import java.time.LocalDate; import java.time.format.DateTimeFormatter; import java.util.Scanner; public class Q4 { public static void main(String[] args) { Scanner in = new Scanner(System.in); LocalDate from = LocalDate.parse(in.next(), DateTimeFormatter.BASIC_ISO_DATE); LocalDate to = LocalDate.parse(\u0026#34;20210917\u0026#34;, DateTimeFormatter.BASIC_ISO_DATE); in.close(); Duration diff = Duration.between(from.atStartOfDay(), to.atStartOfDay()); System.out.println(diff.toDays()); } } import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Scanner; public class Q4_2 { public static void main(String[] args) { SimpleDateFormat dateFormat = new SimpleDateFormat(\u0026#34;yyyyMMdd\u0026#34;); try { Scanner in = new Scanner(System.","title":""}]